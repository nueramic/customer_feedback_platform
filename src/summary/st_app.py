import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
import plotly.graph_objects as go
import plotly.express as px

st.set_page_config(
    page_title="Customer Feedback Platform",
    page_icon="üßä",
    initial_sidebar_state="auto"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞
st.title("Customer Feedback Platform")
st.header('–î—ç—à–±–æ—Ä–¥ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –º–∞–≥–∞–∑–∏–Ω–∞')
st.write(
    """–ù–∞ –¥–∞–Ω–Ω–æ–º –¥—ç—à–±–æ—Ä–¥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∞–≥—Ä–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ.""")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title("–û –ø—Ä–æ–µ–∫—Ç–µ")
st.sidebar.info(
    """
    –ù–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—ç—à–±–æ—Ä–¥–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.
    """
)
st.sidebar.info("–î–∞–Ω–Ω—ã–π –¥—ç—à–±–æ—Ä–¥ —É–∂–µ –∑–∞–ª–∏—Ç –Ω–∞ –≥–∏—Ç—Ö–∞–± –∏ –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ "
                "[–∑–¥–µ—Å—å](https://github.com/nueramic/customer_feedback_platform).")

engine = create_engine('postgresql://itmoml:vcqsaw2007@90.156.210.226:5432/retail_feedback')

query = '''select name_store
            from analytic.v_feedbacks
            where name_store is not null
            group by 1
            having count(*) >= 10
            order by 1'''
shops_df = pd.read_sql(query, engine)

if 'name_store' not in st.session_state:
    # shops_df = pd.read_csv('./data/shops.csv', delimiter=';')
    st.session_state['name_store'] = shops_df.name_store
    ##shops_df.txt_name + ' : ' + shops_df.txt_address

shop_option = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω', st.session_state['name_store'])
categories = ['–°–≤–µ–∂–µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–¶–µ–Ω—ã', '–†–∞–±–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞', '–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞']


# –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–¥–∞—Ä–∞
def draw_radar_all(scores, avg_scores, categories, shop_option):  ## scores row_list[2:]
    fig = go.Figure()
    avg_scores = avg_scores + avg_scores[:1]
    scores = scores + scores[:1]
    categories = categories + categories[:1]
    fig.add_trace(go.Scatterpolar(
        r=scores,
        theta=categories,
        fill='toself',
        name=shop_option
    ))
    fig.add_trace(go.Scatterpolar(
        r=avg_scores,
        theta=categories,
        fill='toself',
        name='–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ'
    ))
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 5]
            )),
        showlegend=False,
        title={'text': '<b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å—Ñ–µ—Ä–∞–º'}
    )
    st.plotly_chart(fig)
    return fig


def shop_selector(shop_option, engine):
    shop_df = pd.read_sql('''select name_store, count(1) cnt
                            , avg(score_overall)*3 score_overall
                            , avg(score_bonus_program)*3 score_bonus_program
                            , avg(score_freshness)*3 score_freshness
                            , avg(score_prices)*3 score_prices
                            , avg(score_staff)*3 score_staff
                            , avg(score_product_range)*3 score_product_range
                            from analytic.v_feedbacks where name_store ilike '{}\'
                            group by 1'''.format(shop_option), engine)
    # st.write(shop_df)
    score_freshness = shop_df.score_freshness[0]
    score_prices = shop_df.score_prices[0]
    score_staff = shop_df.score_staff[0]
    score_product_range = shop_df.score_product_range[0]
    score_bonus_program = shop_df.score_bonus_program[0]
    scores = [score_freshness, score_prices, score_staff, score_product_range, score_bonus_program]
    for i in range(len(scores)):
        if not (scores[i] is None):
            scores[i] += 2
        else:
            scores[i] = 2
    return scores


def avg_selector(engine, select_to_compare, shop_option):
    subquery = '''select count(1) cnt
                       , avg(score_overall)*3 score_overall
                       , avg(score_freshness)*3 score_freshness
                       , avg(score_prices)*3 score_prices
                       , avg(score_staff)*3 score_staff
                       , avg(score_product_range)*3 score_product_range
                       , avg(score_bonus_program)*3 score_bonus_program
                       from analytic.v_feedbacks'''

    if select_to_compare == '–°–æ –≤—Å–µ–º–∏':
        filter_query = ''' '''
    elif select_to_compare == '–í–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏':
        filter_query = ''' where name_store ilike '{}%\''''.format(shop_option.split(' ')[0])
    elif select_to_compare == '–í–Ω—É—Ç—Ä–∏ X5 Group':
        filter_query = ''' where name_store ilike '–ø—è—Ç–µ—Ä–æ—á–∫–∞%\' or name_store ilike '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫%\''''
    else:
        filter_query = ''' where not(name_store ilike '–ø—è—Ç–µ—Ä–æ—á–∫–∞%\' or name_store ilike '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫%\')'''

    query = subquery + filter_query

    avg_df = pd.read_sql(subquery, engine)
    avg_scores = [x + 2 for x in avg_df.loc[0, :].values.flatten().tolist()]
    return avg_scores[2:]


def shop_dynamic(shop_option, engine):
    df = pd.read_sql('''select date_trunc('month',
                                            case when dt_feedback ~ '[0-9]{2}-[0-9]{2}-[0-9]{4}\s+[0-9]{2}:[0-9]{2}:[0-9]{2}'
                                                    then to_timestamp(dt_feedback, 'DD-MM-YYYY HH24:MI:SS')::timestamp
                                                when substring(dt_feedback, 11) ~ '[0-9]{2}-[0-9]{2}-[0-9]{4}'
                                                    then to_timestamp(dt_feedback, 'DD-MM-YYYY')::timestamp
                                                when substring(dt_feedback, 11) ~ '[0-9]{4}-[0-9]{2}-[0-9]{2}'
                                                    then dt_feedback::timestamp
                                              end::date)::date     as "–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞"
                             , avg(2 + score_overall * 3)          as "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤ —Ü–µ–ª–æ–º"
                             , avg(2 + score_freshness * 3)         as "–°–≤–µ–∂–µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
                             , avg(2 + score_prices * 3)            as "–¶–µ–Ω—ã"
                             , avg(2 + score_staff * 3)             as "–†–∞–±–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
                             , avg(2 + score_product_range * 3)     as "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"
                             , avg(2 + score_bonus_program * 3)     as "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
                             , count(1) as "–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                             from analytic.v_feedbacks
                             where name_store ilike ''' + ''' '{}\'
                             group by 1
                             order by "–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞"'''.format(shop_option), engine)
    df = df[df["–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤ —Ü–µ–ª–æ–º"].notna()]
    st.write(px.line(df, x="–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞",
                     y=[
                         "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤ —Ü–µ–ª–æ–º",
                         # "–°–≤–µ–∂–µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                         # "–¶–µ–Ω—ã",
                         # "–†–∞–±–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                         # "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞",
                         # "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
                     ], range_y=[0, 5], markers=True,
                     title='<b>–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫'))
    st.write(df)


def cards(shop_option, engine):
    df = pd.read_sql('''
        with v as ( select *, row_number() over (order by cnt_likes desc, cnt_dislikes, dtime_uploaded desc) as likes_ord
                from analytic.v_feedbacks
                where name_store ilike '{}\' )
       , ags_1 as ( select count(1)                                 as "–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                         , count(score_overall)                     as "–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫ —á–∞—Ç–æ–º"
                         , avg(2 + score_overall * 3)               as "–°—Ä–µ–¥–Ω—è—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞"
                         , sum((2 + score_overall * 3 > 3.5)::int)  as "–ö–æ–ª-–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
                         , sum((2 + score_overall * 3 <= 3.5)::int) as "–ö–æ–ª-–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
                    from v )
       , ags_2 as ( select txt_overall  as "–ö—Ä–∞—Ç–∫–æ –≤ —Ü–µ–ª–æ–º"
                         , txt_feedback as "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                    from v
                    order by likes_ord
                    limit 1 )
       , ags_3 as ( select txt_staff as "–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª"
                    from v
                    order by txt_staff is null, likes_ord
                    limit 1 )
    select *
    from ags_1
             cross join ags_2
             cross join ags_3
    '''.format(shop_option), engine)

    cols = st.columns(5)
    d = df.iloc[0].to_dict()

    cols[0].metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", round(d.get("–°—Ä–µ–¥–Ω—è—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞"), 2))
    cols[1].metric("–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤", d.get("–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤"))
    cols[2].metric("–û—Ü–µ–Ω–æ–∫ —á–∞—Ç–æ–º", d.get("–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫ —á–∞—Ç–æ–º"))
    cols[3].metric("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", d.get("–ö–æ–ª-–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"))
    cols[4].metric("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", d.get("–ö–æ–ª-–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"))

    st.write('**–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞:** ')
    st.text(d.get('–ö—Ä–∞—Ç–∫–æ –≤ —Ü–µ–ª–æ–º').capitalize())
    st.write('**–ü–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤:**')
    st.text(d.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π').capitalize())
    st.write('**–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞:**')
    st.text(d.get('–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞').capitalize())


select_to_compare = st.sidebar.selectbox('–° –∫–µ–º –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å?',
                                         ('–°–æ –≤—Å–µ–º–∏', '–í–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏', '–í–Ω—É—Ç—Ä–∏ X5 Group', '–°–æ –≤—Å–µ–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏'))

draw_radar_all(shop_selector(shop_option, engine), avg_selector(engine, select_to_compare, shop_option), categories,
               shop_option)

cards(shop_option, engine)
shop_dynamic(shop_option, engine)
